import os
import re
import chardet
from typing import List, Dict

# üîß –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è
COMPANY_NAME = "ALCHIN"

# üîß –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
FIELDS = [
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–∞–Ω–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–∞–Ω–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏",
    "–°—É–º–º–∞–†–∞—Å—Ö–æ–¥",
    "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥",
    "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞"
]


def detect_encoding(filepath: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
    with open(filepath, "rb") as f:
        raw = f.read(2048)
    result = chardet.detect(raw)
    return result["encoding"] or "utf-8"


def parse_1c_files(file_paths: List[str]) -> List[Dict[str, str]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ 1CClientBankExchange
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ –∏–∑ FIELDS
    """
    all_records = []

    for file_path in file_paths:
        encoding = detect_encoding(file_path)
        with open(file_path, "r", encoding=encoding, errors="ignore") as f:
            text = f.read()

        # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∫–ª—é—á–µ–π
        text = re.sub(r'([–ê-–ØA-Z_]+)=', lambda m: m.group(1).capitalize() + '=', text)

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –±–ª–æ–∫–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs = re.split(r"–°–µ–∫—Ü–∏—è–î–æ–∫—É–º–µ–Ω—Ç=.*?\n", text, flags=re.IGNORECASE)

        for doc in docs:
            record = {}

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
            if not doc.strip():
                continue

            # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–ª—é—á–∏
            for field in FIELDS + ["–°—É–º–º–∞"]:
                # –ù–∞–π–¥—ë–º "–ö–ª—é—á=–ó–Ω–∞—á–µ–Ω–∏–µ"
                match = re.search(rf"{field}\s*=\s*(.+)", doc, flags=re.IGNORECASE)
                if match:
                    record[field] = match.group(1).strip()

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã (–∑–Ω–∞—á–∏—Ç –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç)
            if "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏" not in record:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ "–°—É–º–º–∞=", –∞ –Ω–µ—Ç –°—É–º–º–∞–†–∞—Å—Ö–æ–¥/–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π)
            if "–°—É–º–º–∞" in record and ("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥" in record or "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥" in record):
                record.pop("–°—É–º–º–∞", None)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            payer = record.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "").lower()
            receiver = record.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "").lower()

            if COMPANY_NAME.lower() in payer and COMPANY_NAME.lower() in receiver:
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –º—ã
            all_records.append({k: record.get(k, "") for k in FIELDS})

    return all_records


# ‚úÖ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
    folder = "."
    files = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".txt")]

    records = parse_1c_files(files)

    # –í—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –æ–ø–µ—Ä–∞—Ü–∏–π:")
    for r in records[:5]:
        print(r)

    # –ü—Ä–∏–º–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤—Å—Ç–∞–≤–∫–µ –≤ –ë–î:
    # cursor.executemany(
    #     """INSERT INTO payments (
    #         receiver_name, payer_name, payer_bin, receiver_bin,
    #         operation_date, expense_sum, income_sum, payment_purpose
    #     ) VALUES (%(–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)s, %(–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)s, %(–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù)s,
    #               %(–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù)s, %(–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏)s, %(–°—É–º–º–∞–†–∞—Å—Ö–æ–¥)s,
    #               %(–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥)s, %(–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞)s)""",
    #     records
    # )
