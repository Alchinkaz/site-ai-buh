import os
import re
import chardet
from typing import List, Dict

# üîß –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è
COMPANY_NAME = "ALCHIN"

# üîß –ù–∞—à–∏ —Å—á–µ—Ç–∞ (–ò–ò–ö)
OUR_ACCOUNTS = [
    "KZ87722C000022014099",  # Kaspi Bank
    "KZ88722S000040014444",  # Kaspi Pay
    "KZ9496511F0008314291",  # ForteBank
]

# üîß –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—Å–∏–º
FIELDS = [
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö",
    "–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞",
    "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏",
    "–°—É–º–º–∞–†–∞—Å—Ö–æ–¥",
    "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥",
    "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞",
]


def detect_encoding(filepath: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
    with open(filepath, "rb") as f:
        raw = f.read(2048)
    result = chardet.detect(raw)
    return result["encoding"] or "utf-8"


def parse_1c_files(file_paths: List[str]) -> List[Dict[str, str]]:
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–ø–∏—Å–∫–∏ 1CClientBankExchange –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    all_records = []

    for file_path in file_paths:
        encoding = detect_encoding(file_path)
        with open(file_path, "r", encoding=encoding, errors="ignore") as f:
            text = f.read()

        # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª—é—á–µ–π
        text = re.sub(r"([–ê-–ØA-Z_]+)=", lambda m: m.group(1).capitalize() + "=", text)
        docs = re.split(r"–°–µ–∫—Ü–∏—è–î–æ–∫—É–º–µ–Ω—Ç=.*?\n", text, flags=re.IGNORECASE)

        for doc in docs:
            if not doc.strip():
                continue

            record = {}
            for field in FIELDS + ["–°—É–º–º–∞"]:
                match = re.search(rf"{field}\s*=\s*(.+)", doc, flags=re.IGNORECASE)
                if match:
                    record[field] = match.group(1).strip()

            if "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏" not in record:
                continue

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é —Å—Ç—Ä–æ–∫—É "–°—É–º–º–∞" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –°—É–º–º–∞–†–∞—Å—Ö–æ–¥/–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥
            if "–°—É–º–º–∞" in record and ("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥" in record or "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥" in record):
                record.pop("–°—É–º–º–∞", None)

            payer_iik = record.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö", "").strip()
            receiver_iik = record.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö", "").strip()

            payer_is_ours = payer_iik in OUR_ACCOUNTS
            receiver_is_ours = receiver_iik in OUR_ACCOUNTS

            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
            if payer_is_ours and receiver_is_ours:
                # –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
                record["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "transfer"
                record["–°—á–µ—Ç–û—Ç–∫—É–¥–∞"] = payer_iik
                record["–°—á–µ—Ç–ö—É–¥–∞"] = receiver_iik
                record["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = "–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏"
                record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–ü–µ—Ä–µ–≤–æ–¥"
            elif payer_is_ours:
                # –†–∞—Å—Ö–æ–¥
                record["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "expense"
                record["–°—á–µ—Ç"] = payer_iik
                record["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = record.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
                record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–†–∞—Å—Ö–æ–¥"
            elif receiver_is_ours:
                # –î–æ—Ö–æ–¥
                record["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "income"
                record["–°—á–µ—Ç"] = receiver_iik
                record["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = record.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
                record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–î–æ—Ö–æ–¥"
            else:
                continue  # –ù–µ –Ω–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å ---
            all_records.append({
                **{f: record.get(f, "") for f in FIELDS},
                "–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏": record.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ""),
                "–°—á–µ—Ç–û—Ç–∫—É–¥–∞": record.get("–°—á–µ—Ç–û—Ç–∫—É–¥–∞", ""),
                "–°—á–µ—Ç–ö—É–¥–∞": record.get("–°—á–µ—Ç–ö—É–¥–∞", ""),
                "–°—á–µ—Ç": record.get("–°—á–µ—Ç", ""),
                "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": record.get("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", ""),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": record.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
            })

    # --- –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ (–ø–æ –¥–∞—Ç–µ, —Å—É–º–º–µ –∏ —Ç–∏–ø—É) ---
    unique_records = []
    seen = set()
    for rec in all_records:
        key = (
            rec.get("–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏", ""),
            rec.get("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥", "") or rec.get("–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥", ""),
            rec.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ""),
            rec.get("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "")
        )
        if key not in seen:
            seen.add(key)
            unique_records.append(rec)

    return unique_records


# ‚úÖ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    folder = "."
    files = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".txt")]

    records = parse_1c_files(files)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –æ–ø–µ—Ä–∞—Ü–∏–π:\n")
    for r in records:
        print(f"–î–∞—Ç–∞: {r.get('–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏')}")
        print(f"–¢–∏–ø: {r.get('–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}")
        if r.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") == "transfer":
            print(f"–ü–µ—Ä–µ–≤–æ–¥: {r.get('–°—á–µ—Ç–û—Ç–∫—É–¥–∞')} ‚Üí {r.get('–°—á–µ—Ç–ö—É–¥–∞')}")
        else:
            print(f"–°—á–µ—Ç: {r.get('–°—á–µ—Ç')}")
            print(f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {r.get('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')}")
        print(f"–°—É–º–º–∞: {r.get('–°—É–º–º–∞–†–∞—Å—Ö–æ–¥', r.get('–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥', ''))}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}")
        print("-" * 50)