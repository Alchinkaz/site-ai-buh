#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import os
import sys
import json
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from parser_improved import parse_1c_files_improved
    from pdf_parser_improved import parse_pdf_improved, get_parser
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã parser_improved.py –∏ pdf_parser_improved.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

def test_1c_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ 1C —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ 1C —Ñ–∞–π–ª–æ–≤...")
    
    # –ò—â–µ–º txt —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    txt_files = [f for f in os.listdir('.') if f.endswith('.txt')]
    
    if not txt_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ txt —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return []
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {txt_files}")
    
    try:
        records = parse_1c_files_improved(txt_files)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(records)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        for i, record in enumerate(records[:3]):
            print(f"\nüìã –û–ø–µ—Ä–∞—Ü–∏—è {i+1}:")
            print(f"  –î–∞—Ç–∞: {record.get('–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏', 'N/A')}")
            print(f"  –¢–∏–ø: {record.get('–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'N/A')}")
            print(f"  –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {record.get('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', 'N/A')}")
            print(f"  –°—É–º–º–∞: {record.get('–°—É–º–º–∞–†–∞—Å—Ö–æ–¥', record.get('–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥', 'N/A'))}")
            print(f"  –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {record.get('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞', 'N/A')}")
        
        return records
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ 1C —Ñ–∞–π–ª–æ–≤: {e}")
        return []

def test_pdf_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF —Ñ–∞–π–ª–æ–≤...")
    
    # –ò—â–µ–º PDF —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    pdf_files = [f for f in os.listdir('.') if f.endswith('.pdf')]
    
    if not pdf_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return []
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {pdf_files}")
    
    results = []
    
    for pdf_file in pdf_files[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ñ–∞–π–ª–∞
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {pdf_file}")
        
        try:
            with open(pdf_file, 'rb') as f:
                pdf_bytes = f.read()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–∞–Ω–∫–∏
            banks = ['Kaspi', 'Forte', 'Halyk', 'Other']
            
            for bank in banks:
                print(f"  üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {bank}...")
                try:
                    records = parse_pdf_improved(pdf_bytes, bank)
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –æ–ø–µ—Ä–∞—Ü–∏–π")
                    
                    if records:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                        record = records[0]
                        print(f"    üìã –ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏:")
                        print(f"      –î–∞—Ç–∞: {record.get('–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏', 'N/A')}")
                        print(f"      –¢–∏–ø: {record.get('–¢–∏–ø', 'N/A')}")
                        print(f"      –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {record.get('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', 'N/A')}")
                        print(f"      –°—É–º–º–∞: {record.get('–°—É–º–º–∞', 'N/A')}")
                    
                    results.extend(records)
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {bank}: {e}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {pdf_file}: {e}")
    
    return results

def test_parser_selection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    banks = ['Kaspi', 'Forte', 'Halyk', 'Jusan', 'Onlinebank', 'Other', 'Unknown']
    
    for bank in banks:
        parser = get_parser(bank)
        parser_name = parser.__class__.__name__
        print(f"  üè¶ {bank} ‚Üí {parser_name}")

def compare_parsers():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä—ã"""
    print("\nüß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    
    # –ò—â–µ–º txt —Ñ–∞–π–ª—ã
    txt_files = [f for f in os.listdir('.') if f.endswith('.txt')]
    
    if not txt_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ txt —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
        from parser import parse_1c_files as parse_1c_files_old
        
        print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
        old_records = parse_1c_files_old(txt_files)
        print(f"  –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä: {len(old_records)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        new_records = parse_1c_files_improved(txt_files)
        print(f"  –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä: {len(new_records)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        if len(new_records) > len(old_records):
            print(f"  ‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª –Ω–∞ {len(new_records) - len(old_records)} –æ–ø–µ—Ä–∞—Ü–∏–π –±–æ–ª—å—à–µ")
        elif len(new_records) < len(old_records):
            print(f"  ‚ö†Ô∏è  –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª –Ω–∞ {len(old_records) - len(new_records)} –æ–ø–µ—Ä–∞—Ü–∏–π –º–µ–Ω—å—à–µ")
        else:
            print(f"  ‚û°Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        old_valid = sum(1 for r in old_records if r.get('–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏') and r.get('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'))
        new_valid = sum(1 for r in new_records if r.get('–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏') and r.get('–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'))
        
        print(f"  –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä: {old_valid}/{len(old_records)} –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print(f"  –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä: {new_valid}/{len(new_records)} –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

def generate_report(results_1c: List[Dict], results_pdf: List[Dict]):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("=" * 50)
    
    print(f"1C —Ñ–∞–π–ª—ã: {len(results_1c)} –æ–ø–µ—Ä–∞—Ü–∏–π")
    print(f"PDF —Ñ–∞–π–ª—ã: {len(results_pdf)} –æ–ø–µ—Ä–∞—Ü–∏–π")
    print(f"–í—Å–µ–≥–æ: {len(results_1c) + len(results_pdf)} –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    if results_1c:
        types_1c = {}
        for record in results_1c:
            t = record.get('–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'Unknown')
            types_1c[t] = types_1c.get(t, 0) + 1
        
        print(f"\n–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –≤ 1C —Ñ–∞–π–ª–∞—Ö:")
        for t, count in types_1c.items():
            print(f"  {t}: {count}")
    
    if results_pdf:
        types_pdf = {}
        for record in results_pdf:
            t = record.get('–¢–∏–ø', 'Unknown')
            types_pdf[t] = types_pdf.get(t, 0) + 1
        
        print(f"\n–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –≤ PDF —Ñ–∞–π–ª–∞—Ö:")
        for t, count in types_pdf.items():
            print(f"  {t}: {count}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    all_results = {
        '1c_records': results_1c,
        'pdf_records': results_pdf,
        'summary': {
            'total_1c': len(results_1c),
            'total_pdf': len(results_pdf),
            'total_all': len(results_1c) + len(results_pdf)
        }
    }
    
    with open('test_results.json', 'w', encoding='utf-8') as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞
    test_parser_selection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ 1C —Ñ–∞–π–ª–æ–≤
    results_1c = test_1c_parsing()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª–æ–≤
    results_pdf = test_pdf_parsing()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
    compare_parsers()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report(results_1c, results_pdf)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()


