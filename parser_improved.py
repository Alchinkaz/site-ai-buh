import os
import re
import chardet
from typing import List, Dict, Optional
from datetime import datetime
from supabase_config import get_supabase_client, test_connection
from decimal import Decimal
import hashlib

# üîß –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è
COMPANY_NAME = "ALCHIN"

# üîß –ù–∞—à–∏ —Å—á–µ—Ç–∞ (–ò–ò–ö) - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
OUR_ACCOUNTS = [
    "KZ87722C000022014099",  # Kaspi Bank
    "KZ88722S000040014444",  # Kaspi Pay
    "KZ9496511F0008314291",  # ForteBank
    # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—á–µ—Ç–æ–≤
    "KZ87722C000022014099",  # Kaspi Bank (–¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    "KZ88722S000040014444",  # Kaspi Pay (–¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
]

# üîß –ü—Å–µ–≤–¥–æ-—Å—á–µ—Ç –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–π –∫–∞—Å—Å—ã
CASH_ACCOUNT = "CASH"

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–ª–∏—á–Ω–æ–π –∫–∞—Å—Å—ã
CASH_KEYWORDS = [
    "–∫–∞—Å—Å–∞",      # —Ä—É—Å
    "–Ω–∞–ª–∏—á",      # –Ω–∞–ª–∏—á–Ω—ã–µ/–Ω–∞–ª–∏—á–Ω—ã–π/–Ω–∞–ª–∏—á–∫–∞
    "cash",       # en
]

# üîß –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—Å–∏–º - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
FIELDS = [
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", 
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù",
    "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö",
    "–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞",
    "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏",
    "–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞",  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    "–°—É–º–º–∞–†–∞—Å—Ö–æ–¥",
    "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥",
    "–°—É–º–º–∞",  # –û–±—â–∞—è —Å—É–º–º–∞
    "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞",
    "–í–∏–¥–î–æ–∫—É–º–µ–Ω—Ç–∞",  # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    "–ö–æ–¥–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è–ü–ª–∞—Ç–µ–∂–∞",  # –ö–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
]

def detect_encoding(filepath: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        with open(filepath, "rb") as f:
            raw = f.read(4096)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        result = chardet.detect(raw)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if result["confidence"] > 0.7:
            return result["encoding"] or "utf-8"
        else:
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            for encoding in ["utf-8", "cp1251", "windows-1251", "iso-8859-1"]:
                try:
                    with open(filepath, "r", encoding=encoding) as f:
                        f.read(1024)
                    return encoding
                except:
                    continue
            return "utf-8"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        return "utf-8"

def normalize_field_name(field_name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
    field_name = field_name.strip()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
    field_mapping = {
        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù": "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù",
        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù",
        "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö": "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö",
        "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö",
        "–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞": "–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞",
        "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏": "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏",
        "–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞": "–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞",
        "–°—É–º–º–∞–†–∞—Å—Ö–æ–¥": "–°—É–º–º–∞–†–∞—Å—Ö–æ–¥",
        "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥": "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥",
        "–°—É–º–º–∞": "–°—É–º–º–∞",
        "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞",
        "–í–∏–¥–î–æ–∫—É–º–µ–Ω—Ç–∞": "–í–∏–¥–î–æ–∫—É–º–µ–Ω—Ç–∞",
        "–ö–æ–¥–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è–ü–ª–∞—Ç–µ–∂–∞": "–ö–æ–¥–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è–ü–ª–∞—Ç–µ–∂–∞",
    }
    
    return field_mapping.get(field_name, field_name)

def extract_field_value(text: str, field_name: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
    patterns = [
        rf"{re.escape(field_name)}\s*=\s*(.+)",
        rf"{re.escape(field_name)}\s*:\s*(.+)",
        rf"{re.escape(field_name)}\s+(.+)",
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, flags=re.IGNORECASE)
        if match:
            value = match.group(1).strip()
            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            value = re.sub(r'[^\w\s–ê-–Ø–∞-—è.,-]', '', value)
            return value
    
    return None

def parse_date(date_str: str) -> Optional[str]:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    if not date_str:
        return None
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    date_str = re.sub(r'[^\d./-]', '', date_str)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
    date_formats = [
        r"(\d{1,2})[./-](\d{1,2})[./-](\d{2,4})",
        r"(\d{2,4})[./-](\d{1,2})[./-](\d{1,2})",
    ]
    
    for pattern in date_formats:
        match = re.match(pattern, date_str)
        if match:
            day, month, year = match.groups()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥–æ–¥
            if len(year) == 2:
                year = "20" + year if int(year) < 50 else "19" + year
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
            day = day.zfill(2)
            month = month.zfill(2)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                datetime(int(year), int(month), int(day))
                return f"{day}.{month}.{year}"
            except ValueError:
                continue
    
    return date_str  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å

def determine_transaction_type(record: Dict[str, str]) -> Dict[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    payer_iik = record.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö", "").strip()
    receiver_iik = record.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö", "").strip()
    doc_type = (record.get("–í–∏–¥–î–æ–∫—É–º–µ–Ω—Ç–∞", "") or "").lower()
    payment_purpose = (record.get("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞", "") or "").lower()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ò–ò–ö (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    payer_iik = payer_iik.replace(" ", "").upper()
    receiver_iik = receiver_iik.replace(" ", "").upper()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞—à–∏ —Å—á–µ—Ç–∞
    our_accounts_normalized = [acc.replace(" ", "").upper() for acc in OUR_ACCOUNTS]
    
    payer_is_ours = payer_iik in our_accounts_normalized
    receiver_is_ours = receiver_iik in our_accounts_normalized
    
    result = {
        "–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏": "",
        "–°—á–µ—Ç–û—Ç–∫—É–¥–∞": "",
        "–°—á–µ—Ç–ö—É–¥–∞": "",
        "–°—á–µ—Ç": "",
        "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": "",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "",
    }
    
    # 1) –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
    if payer_is_ours and receiver_is_ours:
        # –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
        result["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "transfer"
        result["–°—á–µ—Ç–û—Ç–∫—É–¥–∞"] = payer_iik
        result["–°—á–µ—Ç–ö—É–¥–∞"] = receiver_iik
        result["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = "–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏"
        result["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–ü–µ—Ä–µ–≤–æ–¥"
    # 2) –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥
    elif payer_is_ours:
        # –†–∞—Å—Ö–æ–¥
        result["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "expense"
        result["–°—á–µ—Ç"] = payer_iik
        result["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = record.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
        result["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–†–∞—Å—Ö–æ–¥"
    # 3) –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–æ—Ö–æ–¥
    elif receiver_is_ours:
        # –î–æ—Ö–æ–¥
        result["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "income"
        result["–°—á–µ—Ç"] = receiver_iik
        result["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = record.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")
        result["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–î–æ—Ö–æ–¥"
    else:
        # 4) –ù–ê–õ–ò–ß–ù–ê–Ø –ö–ê–°–°–ê: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ò–ò–ö, –Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–∏–¥–Ω–æ, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∫–∞—Å—Å–æ–≤–∞—è
        is_cash_related = any(kw in doc_type for kw in CASH_KEYWORDS) or any(kw in payment_purpose for kw in CASH_KEYWORDS)

        if is_cash_related:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—É–º–º–∞–º
            expense_exists = bool(record.get("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥"))
            income_exists = bool(record.get("–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥"))

            if expense_exists and not income_exists:
                result["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "expense"
                result["–°—á–µ—Ç"] = CASH_ACCOUNT
                result["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = record.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "") or "–ù–∞–ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥"
                result["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–†–∞—Å—Ö–æ–¥"
            elif income_exists and not expense_exists:
                result["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = "income"
                result["–°—á–µ—Ç"] = CASH_ACCOUNT
                result["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç"] = record.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "") or "–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥"
                result["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = "–î–æ—Ö–æ–¥"
            else:
                # –ï—Å–ª–∏ –æ–±–µ —Å—É–º–º—ã –∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π, –ø—É—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
                pass
    
    return result

def save_transactions_to_database(transactions: List[Dict[str, str]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase"""
    try:
        supabase = get_supabase_client()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_result = supabase.table("companies").select("id").eq("name", COMPANY_NAME).execute()
        if not company_result.data:
            print(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è {COMPANY_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        company_id = company_result.data[0]["id"]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        db_transactions = []
        for transaction in transactions:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            operation_date = None
            if transaction.get("–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"):
                try:
                    operation_date = datetime.strptime(transaction["–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"], "%d.%m.%Y").date()
                except:
                    try:
                        operation_date = datetime.strptime(transaction["–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"], "%Y-%m-%d").date()
                    except:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {transaction['–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏']}")
                        continue
            
            document_date = None
            if transaction.get("–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"):
                try:
                    document_date = datetime.strptime(transaction["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"], "%d.%m.%Y").date()
                except:
                    try:
                        document_date = datetime.strptime(transaction["–î–∞—Ç–∞–î–æ–∫—É–º–µ–Ω—Ç–∞"], "%Y-%m-%d").date()
                    except:
                        pass
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã
            amount_expense = Decimal(0)
            amount_income = Decimal(0)
            
            if transaction.get("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥"):
                try:
                    amount_expense = Decimal(str(transaction["–°—É–º–º–∞–†–∞—Å—Ö–æ–¥"]).replace(",", "."))
                except:
                    pass
            
            if transaction.get("–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥"):
                try:
                    amount_income = Decimal(str(transaction["–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥"]).replace(",", "."))
                except:
                    pass
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞, –Ω–æ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–æ—Ö–æ–¥–æ–≤
            if transaction.get("–°—É–º–º–∞") and amount_expense == 0 and amount_income == 0:
                try:
                    amount = Decimal(str(transaction["–°—É–º–º–∞"]).replace(",", "."))
                    if transaction.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") == "expense":
                        amount_expense = amount
                    elif transaction.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") == "income":
                        amount_income = amount
                except:
                    pass
            
            db_transaction = {
                "company_id": company_id,
                "transaction_type": transaction.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ""),
                "operation_date": operation_date.isoformat() if operation_date else None,
                "document_date": document_date.isoformat() if document_date else None,
                "document_number": transaction.get("–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞", ""),
                "document_type": transaction.get("–í–∏–¥–î–æ–∫—É–º–µ–Ω—Ç–∞", ""),
                "amount_expense": float(amount_expense),
                "amount_income": float(amount_income),
                # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∫–∞—Å—Å–æ–≤–∞—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—á–µ—Ç –∫–∞–∫ CASH
                "payer_account": (CASH_ACCOUNT if (transaction.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") == "expense" and transaction.get("–°—á–µ—Ç") == CASH_ACCOUNT) else transaction.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ò–ò–ö", "")),
                "receiver_account": (CASH_ACCOUNT if (transaction.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") == "income" and transaction.get("–°—á–µ—Ç") == CASH_ACCOUNT) else transaction.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ò–ò–ö", "")),
                "from_account": transaction.get("–°—á–µ—Ç–û—Ç–∫—É–¥–∞", ""),
                "to_account": transaction.get("–°—á–µ—Ç–ö—É–¥–∞", ""),
                "payer_name": transaction.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
                "receiver_name": transaction.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
                "payer_bin_iin": transaction.get("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–ë–ò–ù_–ò–ò–ù", ""),
                "receiver_bin_iin": transaction.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å–ë–ò–ù_–ò–ò–ù", ""),
                "payment_purpose": transaction.get("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ–ü–ª–∞—Ç–µ–∂–∞", ""),
                "payment_code": transaction.get("–ö–æ–¥–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è–ü–ª–∞—Ç–µ–∂–∞", ""),
                "counterparty": transaction.get("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", ""),
                "category": transaction.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ""),
            }

            # –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            hash_source_parts = [
                str(company_id),
                str(db_transaction.get("transaction_type", "")).strip().lower(),
                str(db_transaction.get("operation_date", "")),
                str(db_transaction.get("document_date", "")),
                str(db_transaction.get("document_number", "")).strip(),
                str(db_transaction.get("amount_expense", 0.0)),
                str(db_transaction.get("amount_income", 0.0)),
                str(db_transaction.get("payer_account", "")).replace(" ", "").upper(),
                str(db_transaction.get("receiver_account", "")).replace(" ", "").upper(),
                str(db_transaction.get("from_account", "")).replace(" ", "").upper(),
                str(db_transaction.get("to_account", "")).replace(" ", "").upper(),
                str(db_transaction.get("counterparty", "")).strip().lower(),
            ]
            hash_source = "|".join(hash_source_parts)
            transaction_hash = hashlib.sha256(hash_source.encode("utf-8")).hexdigest()
            db_transaction["transaction_hash"] = transaction_hash
            
            db_transactions.append(db_transaction)
        
        if not db_transactions:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ (company_id, transaction_hash)
        # –í–∞–∂–Ω–æ: –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å unique index –Ω–∞ (company_id, transaction_hash)
        result = (
            supabase
            .table("transactions")
            .upsert(db_transactions, on_conflict="company_id,transaction_hash")
            .select("*")
            .execute()
        )
        
        if getattr(result, "data", None) is not None:
            saved = len(result.data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {saved} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {getattr(result, 'error', 'unknown error')}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def sync_transactions(file_paths: List[str]) -> bool:
    """–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã –∏ –¥–µ–ª–∞–µ—Ç upsert –≤ –ë–î"""
    records = parse_1c_files_improved(file_paths)
    if not records:
        print("‚ÑπÔ∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return False
    return save_transactions_to_database(records)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def get_transaction_statistics(start_date: str = None, end_date: str = None) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        supabase = get_supabase_client()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_result = supabase.table("companies").select("id").eq("name", COMPANY_NAME).execute()
        if not company_result.data:
            return {"error": f"–ö–æ–º–ø–∞–Ω–∏—è {COMPANY_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        company_id = company_result.data[0]["id"]
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        result = supabase.rpc("get_transaction_stats", {
            "company_uuid": company_id,
            "start_date": start_date,
            "end_date": end_date
        }).execute()
        
        if result.data:
            return result.data[0]
        else:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}
            
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"}

def get_recent_transactions(limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        supabase = get_supabase_client()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_result = supabase.table("companies").select("id").eq("name", COMPANY_NAME).execute()
        if not company_result.data:
            return []
        
        company_id = company_result.data[0]["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        result = supabase.table("transactions")\
            .select("*")\
            .eq("company_id", company_id)\
            .order("operation_date", desc=True)\
            .limit(limit)\
            .execute()
        
        return result.data if result.data else []
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []

def validate_record(record: Dict[str, str]) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"]
    
    for field in required_fields:
        if not record.get(field):
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—É–º–º–∞
    has_amount = any(record.get(field) for field in ["–°—É–º–º–∞–†–∞—Å—Ö–æ–¥", "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥", "–°—É–º–º–∞"])
    if not has_amount:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    date = parse_date(record.get("–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏", ""))
    if not date:
        return False
    
    return True

def parse_1c_files_improved(file_paths: List[str]) -> List[Dict[str, str]]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ 1C"""
    all_records = []
    
    for file_path in file_paths:
        if not os.path.exists(file_path):
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
        
        try:
            encoding = detect_encoding(file_path)
            with open(file_path, "r", encoding=encoding, errors="ignore") as f:
                text = f.read()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            continue
        
        # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª—é—á–µ–π - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        text = re.sub(r"([–ê-–ØA-Z_]+)=", lambda m: m.group(1).capitalize() + "=", text)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        doc_patterns = [
            r"–°–µ–∫—Ü–∏—è–î–æ–∫—É–º–µ–Ω—Ç=.*?\n",
            r"–î–æ–∫—É–º–µ–Ω—Ç=.*?\n",
            r"–û–ø–µ—Ä–∞—Ü–∏—è=.*?\n",
        ]
        
        docs = [text]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for pattern in doc_patterns:
            new_docs = []
            for doc in docs:
                parts = re.split(pattern, doc, flags=re.IGNORECASE)
                new_docs.extend(parts)
            docs = new_docs
        
        for doc in docs:
            if not doc.strip():
                continue
            
            record = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            for field in FIELDS:
                value = extract_field_value(doc, field)
                if value:
                    record[field] = value
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
            if "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏" not in record:
                continue
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É
            record["–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"] = parse_date(record["–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"]) or record["–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏"]
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é —Å—Ç—Ä–æ–∫—É "–°—É–º–º–∞" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –°—É–º–º–∞–†–∞—Å—Ö–æ–¥/–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥
            if "–°—É–º–º–∞" in record and ("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥" in record or "–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥" in record):
                record.pop("–°—É–º–º–∞", None)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_info = determine_transaction_type(record)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
            if not transaction_info["–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"]:
                continue
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
            if not validate_record(record):
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
            final_record = {
                **{f: record.get(f, "") for f in FIELDS},
                **transaction_info,
            }
            
            all_records.append(final_record)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
    unique_records = []
    seen = set()
    
    for rec in all_records:
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π
        key = (
            rec.get("–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏", ""),
            rec.get("–°—É–º–º–∞–†–∞—Å—Ö–æ–¥", "") or rec.get("–°—É–º–º–∞–ü—Ä–∏—Ö–æ–¥", ""),
            rec.get("–¢–∏–ø–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ""),
            rec.get("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", ""),
            rec.get("–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞", ""),
        )
        
        if key not in seen:
            seen.add(key)
            unique_records.append(rec)
    
    return unique_records

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
def parse_1c_files(file_paths: List[str]) -> List[Dict[str, str]]:
    """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return parse_1c_files_improved(file_paths)

# ‚úÖ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    if not test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        exit(1)
    
    folder = "."
    files = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".txt")]

    if not files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ .txt –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        exit(1)

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
    records = parse_1c_files_improved(files)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –æ–ø–µ—Ä–∞—Ü–∏–π")

    if records:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        if save_transactions_to_database(records):
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
            stats = get_transaction_statistics()
            if "error" not in stats:
                print(f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_income']:.2f}")
                print(f"üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {stats['total_expense']:.2f}")
                print(f"üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['net_amount']:.2f}")
                print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transaction_count']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            print("\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
            recent = get_recent_transactions(5)
            for i, t in enumerate(recent, 1):
                print(f"{i}. {t['operation_date']} - {t['transaction_type']} - {t['amount_total']} - {t['counterparty']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
