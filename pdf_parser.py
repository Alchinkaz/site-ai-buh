import io
import re
import json
import pdfplumber

def parse_text_content(text: str, bank_name: str):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    text = text.replace("\xa0", " ")
    text = re.sub(r"[ \t]{2,}", " ", text)

    lines = [l.strip() for l in text.splitlines() if l.strip()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not lines:
        return []
    
    operations, cur = [], []
    for line in lines:
        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–∞—Ç—ã ‚Äî –Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        if re.match(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", line):
            if cur:
                operations.append(cur)
                cur = []
        cur.append(line)
    if cur:
        operations.append(cur)

    results = []
    for op in operations:
        full = " ".join(op)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        date_match = re.search(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", full)
        date = date_match.group(0) if date_match else ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_number = ""
        doc_match = re.search(r"(?:–¥–æ–∫|–¥–æ–∫—É–º–µ–Ω—Ç|‚Ññ|#)\s*(\d+)", full, re.IGNORECASE)
        if doc_match:
            doc_number = doc_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–±–µ—Ç –∏ –∫—Ä–µ–¥–∏—Ç
        debit = ""
        credit = ""
        
        # –ò—â–µ–º —Å—É–º–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –¥–∞—Ç—É –∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º
        text_for_amounts = full
        
        # –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É
        if date:
            text_for_amounts = text_for_amounts.replace(date, "")
        
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if doc_number:
            text_for_amounts = text_for_amounts.replace(f"‚Ññ{doc_number}", "").replace(f"–¥–æ–∫ {doc_number}", "")
        
        # –ò—â–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–º–º–∞–º–∏
        amounts = []
        all_numbers = re.findall(r"\d+(?:[.,]\d{2})?", text_for_amounts)
        
        for num in all_numbers:
            try:
                clean_num = num.replace(",", ".")
                value = float(clean_num)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—É–º–Ω–∞—è —Å—É–º–º–∞ (–±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤)
                if 0 < value < 10000000:
                    amounts.append(num)
            except:
                continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–±–µ—Ç –∏ –∫—Ä–µ–¥–∏—Ç
        if len(amounts) >= 2:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–µ —Å—É–º–º—ã, –±–µ—Ä–µ–º –∏—Ö –∫–∞–∫ –¥–µ–±–µ—Ç –∏ –∫—Ä–µ–¥–∏—Ç
            amounts_clean = [amt.replace(" ", "").replace(",", ".") for amt in amounts]
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –±–µ—Ä–µ–º –¥–≤–µ –Ω–∞–∏–±–æ–ª—å—à–∏–µ
            amounts_clean.sort(key=lambda x: float(x), reverse=True)
            credit = amounts_clean[0]  # –ë–æ–ª—å—à–∞—è —Å—É–º–º–∞
            debit = amounts_clean[1]   # –ú–µ–Ω—å—à–∞—è —Å—É–º–º–∞
        elif len(amounts) == 1:
            # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—É–º–º–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            amount = amounts[0].replace(" ", "").replace(",", ".")
            if any(word in full.lower() for word in ["–¥–µ–±–µ—Ç", "—Ä–∞—Å—Ö–æ–¥", "—Å–ø–∏—Å–∞–Ω–∏–µ", "–æ–ø–ª–∞—Ç–∞"]):
                debit = amount
            elif any(word in full.lower() for word in ["–∫—Ä–µ–¥–∏—Ç", "–¥–æ—Ö–æ–¥", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ"]):
                credit = amount
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥–æ–º
                debit = amount
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_type = ""
        if debit and not credit:
            operation_type = "–†–∞—Å—Ö–æ–¥"
            amount = debit
        elif credit and not debit:
            operation_type = "–î–æ—Ö–æ–¥"
            amount = credit
        elif debit and credit:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –¥–µ–±–µ—Ç –∏ –∫—Ä–µ–¥–∏—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –±–æ–ª—å—à–µ–π —Å—É–º–º–µ
            debit_val = float(debit) if debit else 0
            credit_val = float(credit) if credit else 0
            if debit_val > credit_val:
                operation_type = "–†–∞—Å—Ö–æ–¥"
                amount = debit
            else:
                operation_type = "–î–æ—Ö–æ–¥"
                amount = credit
        else:
            operation_type = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            amount = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        counterparty = ""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        counterparty_patterns = [
            r"(?:–ò–ü|–¢–û–û|–û–û–û|–ê–û|–ê–û–û–¢|–¢–î–û|–ö–•|–ü–ö|–ö–ü|–°–ü–ö|–ß–ü|–§–õ)\s+[A-Za-z–ê-–Ø–∞-—è0-9 .\"'¬´¬ª-]+",
            r"[A-Za-z–ê-–Ø–∞-—è]{2,}\s+[A-Za-z–ê-–Ø–∞-—è]{2,}(?:\s+[A-Za-z–ê-–Ø–∞-—è]{2,})*",
        ]
        
        for pattern in counterparty_patterns:
            match = re.search(pattern, full)
            if match:
                counterparty = match.group(0).strip()
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                counterparty = re.sub(r'[^\w\s–ê-–Ø–∞-—è¬´¬ª""\'-]', '', counterparty)
                if len(counterparty) > 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
                    break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
        comment = full
        
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if date:
            comment = comment.replace(date, "").strip()
        if doc_number:
            comment = comment.replace(f"‚Ññ{doc_number}", "").replace(f"–¥–æ–∫ {doc_number}", "").strip()
        if counterparty:
            comment = comment.replace(counterparty, "").strip()
        if debit:
            comment = comment.replace(debit, "").strip()
        if credit:
            comment = comment.replace(credit, "").strip()
        
        # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        comment = re.sub(r'\s+', ' ', comment).strip()
        
        results.append({
            "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏": date,
            "–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞": doc_number,
            "–î–µ–±–µ—Ç": debit,
            "–ö—Ä–µ–¥–∏—Ç": credit,
            "–¢–∏–ø": operation_type,
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": counterparty,
            "–°—É–º–º–∞": amount,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
            "–ë–∞–Ω–∫": bank_name
        })
    return results

def parse_pdf(file_bytes: bytes, bank_name: str):
    """–ü–∞—Ä—Å–∏—Ç PDF-—Ñ–∞–π–ª –∏–∑ –ø–∞–º—è—Ç–∏ (–±–∞–π—Ç—ã) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    try:
        text = ""
        with pdfplumber.open(io.BytesIO(file_bytes)) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text() or ""
                text += page_text + "\n"
    except Exception as e:
        print(json.dumps({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ PDF: {str(e)}"}, ensure_ascii=False))
        return []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if not text.strip():
        print(json.dumps({"error": "PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω"}, ensure_ascii=False))
        return []

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
    return parse_text_content(text, bank_name)


# --------------------------
# –ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
# --------------------------
if __name__ == "__main__":
    import os
    import sys
    import json

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) >= 3:
        # –ó–∞–ø—É—Å–∫ –∏–∑ API - –ø–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        pdf_path = sys.argv[1]
        bank_name = sys.argv[2]
        
        if not os.path.exists(pdf_path):
            print(json.dumps({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, ensure_ascii=False))
            sys.exit(1)

        with open(pdf_path, "rb") as f:
            pdf_bytes = f.read()

        data = parse_pdf(pdf_bytes, bank_name)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è API
        print(json.dumps(data, ensure_ascii=False, indent=2))
        
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        pdf_path = input("üìÑ –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í—ã–ø–∏—Å–∫–∞.pdf): ").strip()
        bank_name = input("üè¶ –£–∫–∞–∂–∏ –±–∞–Ω–∫ (Kaspi / Forte / Onlinebank): ").strip()

        if not os.path.exists(pdf_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            exit()

        with open(pdf_path, "rb") as f:
            pdf_bytes = f.read()

        data = parse_pdf(pdf_bytes, bank_name)
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(data)}\n")

        for d in data[:10]:
            print(d)

        # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        save_json = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON? (y/n): ").strip().lower()
        if save_json == "y":
            out = "result.json"
            with open(out, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {out}")
