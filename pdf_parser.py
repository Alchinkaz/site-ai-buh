import io
import re
import json
import pdfplumber

def parse_pdf(file_bytes: bytes, bank_name: str):
    """–ü–∞—Ä—Å–∏—Ç PDF-—Ñ–∞–π–ª –∏–∑ –ø–∞–º—è—Ç–∏ (–±–∞–π—Ç—ã) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    try:
        text = ""
        with pdfplumber.open(io.BytesIO(file_bytes)) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text() or ""
                text += page_text + "\n"
    except Exception as e:
        print(json.dumps({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ PDF: {str(e)}"}, ensure_ascii=False))
        return []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if not text.strip():
        print(json.dumps({"error": "PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω"}, ensure_ascii=False))
        return []

    text = text.replace("\xa0", " ")
    text = re.sub(r"[ \t]{2,}", " ", text)

    lines = [l.strip() for l in text.splitlines() if l.strip()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not lines:
        print(json.dumps({"error": "PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}, ensure_ascii=False))
        return []
    
    operations, cur = [], []
    for line in lines:
        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–∞—Ç—ã ‚Äî –Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        if re.match(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", line):
            if cur:
                operations.append(cur)
                cur = []
        cur.append(line)
    if cur:
        operations.append(cur)

    results = []
    for op in operations:
        full = " ".join(op)
        date_match = re.search(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", full)
        date = date_match.group(0) if date_match else ""
        sums = re.findall(r"[-+]?\d[\d\s.,]*\d", full)
        amount = sums[-1].replace(" ", "").replace(",", ".") if sums else ""
        typ = "–î–æ—Ö–æ–¥" if ("+" in amount or "–î–æ—Ö–æ–¥" in full) else "–†–∞—Å—Ö–æ–¥" if "-" in amount else ""
        counterparty = ""
        contr = re.search(r"(?:–ò–ü|–¢–û–û|–û–û–û|–ê–û)\s+[A-Za-z–ê-–Ø–∞-—è0-9 .\"']+", full)
        if contr:
            counterparty = contr.group(0)
        comment = full
        results.append({
            "–î–∞—Ç–∞–û–ø–µ—Ä–∞—Ü–∏–∏": date,
            "–¢–∏–ø": typ,
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": counterparty,
            "–°—É–º–º–∞": amount,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
            "–ë–∞–Ω–∫": bank_name
        })
    return results


# --------------------------
# –ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
# --------------------------
if __name__ == "__main__":
    import os
    import sys
    import json

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) >= 3:
        # –ó–∞–ø—É—Å–∫ –∏–∑ API - –ø–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        pdf_path = sys.argv[1]
        bank_name = sys.argv[2]
        
        if not os.path.exists(pdf_path):
            print(json.dumps({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, ensure_ascii=False))
            sys.exit(1)

        with open(pdf_path, "rb") as f:
            pdf_bytes = f.read()

        data = parse_pdf(pdf_bytes, bank_name)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è API
        print(json.dumps(data, ensure_ascii=False, indent=2))
        
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        pdf_path = input("üìÑ –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í—ã–ø–∏—Å–∫–∞.pdf): ").strip()
        bank_name = input("üè¶ –£–∫–∞–∂–∏ –±–∞–Ω–∫ (Kaspi / Forte / Onlinebank): ").strip()

        if not os.path.exists(pdf_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            exit()

        with open(pdf_path, "rb") as f:
            pdf_bytes = f.read()

        data = parse_pdf(pdf_bytes, bank_name)
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(data)}\n")

        for d in data[:10]:
            print(d)

        # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        save_json = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON? (y/n): ").strip().lower()
        if save_json == "y":
            out = "result.json"
            with open(out, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {out}")
